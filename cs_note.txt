    类的封装--分部类型当我们新建立一个扩展名是aspx.cs的网页文件时，VS会自动生成以下类：public partial class 类名: System.Web.UI.Page{}其中的partial关键字就是C#中的分部类型。一个类如果有成千上万行的代码，导致*.cs文件非常长，该类也有可能由多人编写完成。此情况下可以将一个类分布到多个C#文件中。下面建立一个aPerson分部类做成两个分部类，分别保存在PersonA.cs和PersonB.cs两个文件中。//PersonA.cspublic partial class aPerson{}//PersonB.cspublic partial class aPerson {}使用分部类时要求分部类的每个部分一定要用关键字partial。    类的继承与C++不同的是，C#类只能有一个直接的基类，不能创建直接派生自两个或者两个以上基类的类型，既C#不支持多重继承，故以下Students类继承Person和Family两个类是错误的：public class Students:Person,Family{    ……}如果Students类不想被再往下继承，可以使用sealed关键字标记该类：public sealed class Students:Person{    ……}    类的多态性class Bird{    public void Fly()    {       //使鸟飞的代码    }    public void LayEgg()    {     //鸟下蛋的代码    }}class Pigeon:Bird{    public void Coo()    {…}}class Penguin:Bird{     public void Swim()     {…}}（1）父类中准备让子类修改的方法上增加virtual关键字class Bird{    //向Fly()方法增加virtual，表明允许子类修改该方法public virtual void Fly(){//使鸟飞的代码}public void LayEgg(){//鸟下蛋的代码}}（2）子类中在要重写父类的方法前，使用override关键字class Penguin:Bird{   //为了覆盖父类Fly()，向子类增加一个同名的方法，而且要使用override关键字  public override void Fly(){…}}    集合与泛型要输出数组intArray的每一个值，可以：foreach(int i in intArray){    Response.Write(i+"<br>");   }非泛型集合：命名空间是：System.Collections，常用的类有：ArrayList、HashTable、Queue、SortedList、Stack。泛型集合：命名空间是：System.Collections.Generic，常用的类型List<T>、Queue<T>、Stack<T>、Dictionary<Key,Value>等，其中T表示某种数据类型，Key表示键，Value表示值使用方法如：List<int> intArray = new List<int>();intArray.Add(10);intArray.Add(15);也可以在定义intArray时对其初始化：List<int> intArray = new List<int>(){10,15,20};类泛型集合List<students> StudentsList = new List<students>();            StudentsList.Add(new students("9501", "张三", "男", "计算机系"));            Response.Write("一共有" + StudentsList.Count + "个学生<br>");             foreach (students s in StudentsList)            {                string strStudent = string.Format("学号：{0}，姓名：{1},性别：{2}，系：{3}", s.student_no, s.student_name, s.gender, s.faculty);                Response.Write(strStudent + "<br>");            }（1）创建及初始化Dictionary<int,string>myDictionary=new Dictionary<int,string>();（2）添加元素myDictionary.Add(1,"C#");myDictionary.Add(2,"C++");myDictionary.Add(3,"ASP.NET"); myDictionary.Add(4,"MVC");（3）通过Key查找元素if(myDictionary.ContainsKey(2)) {     string result = string.Format("Key:{0},Value:{1}", 2, myDictionary[2]);     Response.Write(result); }（4）遍历键值对foreach (KeyValuePair<int, string> kvp in myDictionary){   string result = string.Format("Key:{0},Value:{1}", kvp.Key, kvp.Value);   Response.Write(result+"<br>");}（5）获得值和键的集合//获取值的集合foreach (string s in myDictionary.Values) {    string result = string.Format("value={0}", s);    Response.Write(result + "<br>"); }   //获取键的集合foreach (int s in myDictionary.Keys)   {    string result = string.Format("key={0}", s);    Response.Write(result + "<br>");   }（6）统计字典中的键值对数int howMany= myDictionary.Count;